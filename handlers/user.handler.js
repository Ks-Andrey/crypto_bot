require('dotenv').config();
const TonWeb = require("tonweb");
const { tasksKeyboard, authKeyboard, adminKeyboard, commands, lessonsKeyboard } = require('../utils/keyboards');
const ErrorHandler = require('../utils/error.handler'); 

class UserHandler {
  constructor(bot, userRepository, taskRepository, lessonRepository, adminId) {
    this.adminId = adminId;
    this.bot = bot;

    this.userRepository = userRepository;
    this.taskRepository = taskRepository;
    this.lessonRepository = lessonRepository;

    this.userState = {};

    this.initializeBotHandlers();
  }

  initializeBotHandlers() {
    this.bot.on('message', this.handleMessage.bind(this));
    this.bot.on('callback_query', this.handleCallbackQuery.bind(this));
  }

  async handleMessage(msg) {
    const chatId = msg.chat.id;
    const messageText = msg.text;

    if (Object.values(commands).includes(messageText)) return;

    try {
      switch (this.userState[chatId]) {
        case 'addWallet':
          await this.processWallet(chatId, messageText);
          break;
        case 'broadcast':
          await this.processBroadcastMessage(chatId, msg.message_id);
          break;
        default:
          break;
      }
    } catch (error) {
      ErrorHandler.handleError(error, chatId, this.bot);
    }
  }

  async handleCallbackQuery(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    try {
      if (data.startsWith('task_')) {
        await this.processTaskSelection(chatId, data, callbackQuery.message.message_id);
      } else if (data.startsWith('done_')) {
        await this.proccessConfirmTask(chatId, data, callbackQuery.message.message_id);
      } else if (data.startsWith('confirm_')){
        await this.processTaskCompletion(chatId, data, callbackQuery.message.message_id);
      } else if (data.startsWith('archive_')) {
        await this.processArchiveSelection(chatId, data, callbackQuery.message.message_id); 
      } else if (data == 'tasks') {
        await this.openTaskList(chatId, callbackQuery.message.message_id);
      } else if (data == 'archive') {
        await this.openArchiveList(chatId, callbackQuery.message.message_id);
      } else if (data == 'back_task') {
        await this.openTasks(chatId, callbackQuery.message.message_id);
      } else if (data == 'back_lesson') {
        await this.openLibrary(chatId, callbackQuery.message.message_id);
      } else if (data == 'default_lessons') {
        await this.openLessonList(chatId, callbackQuery.message.message_id, 0);
      } else if (data == 'extended_lessons') {
        await this.openLessonList(chatId, callbackQuery.message.message_id, 1);
      } else if (data.startsWith('lesson_')) {
        await this.processLessonSelection(chatId, data, callbackQuery.message.message_id);
      } else if (data == 'add_wallet') {
        await this.addWallet(chatId, callbackQuery.id);
      }
    } catch (error) {
      ErrorHandler.handleError(error, chatId, this.bot);
    }
  }

  async startMessage(msg) {
    const chatId = msg.chat.id;
    const username = msg.from.username;
    const referralCode = msg.text.includes(' ') ? msg.text.split(' ')[1] : this.adminId;

    this.clearUserState(chatId);

    try {
      const user = await this.userRepository.getUserById(chatId);
      const wallet = user[0]?.wallet;
      
      if (user.length === 0) {
        await this.userRepository.addUser(chatId, username, '', referralCode);
      }

      const keyboard = chatId.toString() === this.adminId ? adminKeyboard : authKeyboard;

      this.bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!', keyboard);
    } catch (error) {
      ErrorHandler.handleError(error, chatId, this.bot);
    }
  }

  async addWallet(chatId, queryId) {
    this.clearUserState(chatId);

    this.bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫!');
    this.userState[chatId] = 'addWallet';

    this.bot.answerCallbackQuery(queryId);
  }

  async getUserWallet(chatId) {
    this.clearUserState(chatId);

    try {
      const user = await this.userRepository.getUserById(chatId);

      if (user[0]?.task_points !== null && user[0]?.lesson_points !== null && user[0]?.ref_points !== null) {
        const totalPoints = user[0]?.task_points + user[0]?.lesson_points + user[0]?.ref_points;
        const wallet = user[0]?.wallet ? user[0]?.wallet : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.';

        this.bot.sendMessage(chatId, `–¢–µ–∫—É—â–∏–π –∫–æ—à–µ–ª–µ–∫:\n<code>${wallet}</code>\n\n–í—Å–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:\n–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π: ${user[0].task_points}‚òÖ\n–û—Ç–∫—Ä—ã—Ç–∏–µ —É—Ä–æ–∫–æ–≤: ${user[0].lesson_points}‚òÖ\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π: ${user[0].ref_points}‚òÖ\n–í—Å–µ–≥–æ –æ—á–∫–æ–≤: ${totalPoints}‚òÖ`, {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{text: user[0]?.wallet ? '–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫' : '–î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫', callback_data: 'add_wallet'}]
            ]
          }
        });
      } else {
        this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞.');
      }
    } catch (error) {
      ErrorHandler.handleError(error, chatId, this.bot);
    }
  }

  async getReferralLink(chatId) {
    this.clearUserState(chatId);

    try {
      const botLink = process.env.BOT_REF_LINK;
      const refLink = `${botLink}?start=${chatId}`;
      const referrals = await this.userRepository.getUserReferrals(chatId);

      this.bot.sendMessage(chatId, `–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 500 XP –∑–∞ –∫–∞–∂–¥–æ–≥–æ. –†–µ—Ñ–µ—Ä–∞–ª –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –¥—Ä—É–≥ –¥–æ–±–∞–≤–∏—Ç —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫ –≤ –±–æ—Ç–∞\n\n–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n${refLink}\n\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referrals.length}`);
    } catch (error) {
      ErrorHandler.handleError(error, chatId, this.bot);
    }
  }

  async sendBroadcastMessagePrompt(chatId) {
    this.clearUserState(chatId);
    this.bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
    this.userState[chatId] = 'broadcast';
  }

  async openStatistics(chatId) {
    try {
      const topUsers = await this.userRepository.getTopUsers(chatId);

      let message = 'üèÜ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n';
  
      topUsers.forEach(user => {
        message += `${user.place}. ${user.name}: ${user.total_points}‚òÖ\n`;
      });
  
      const specificUser = topUsers.find(user => user.user_id == chatId);
  
      if (specificUser.place > 10) {
        message += `\n–í–∞—à–µ –º–µ—Å—Ç–æ: ${specificUser.place}\n–û—á–∫–∏: ${specificUser.total_points}‚òÖ`;
      }
  
      await this.bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }

  async openLibrary(chatId, messageId = null) {
    const text = '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É. –°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π –∫—É—Ä—Å. –ó–∞ –∏–∑—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—á–∫–∏';

    if (messageId) {
      this.bot.sendMessage(chatId, text, {
          reply_markup: lessonsKeyboard
      });

      this.bot.deleteMessage(chatId, messageId);
    } else {
      this.bot.sendMessage(chatId, text, {
          reply_markup: lessonsKeyboard
      });
    }
  }

  async openTasks(chatId, messageId = null) {
    const text = '–î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –æ–±—É—á–µ–Ω–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è. –ú—ã —Å–¥–µ–ª–∞–ª–∏ –∏—Ö –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—ã–º–∏. –ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—á–∫–∏.';

    if (messageId) {
      this.bot.editMessageText(text, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: tasksKeyboard
      });
    }else{
      this.bot.sendMessage(chatId, text, {
        reply_markup: tasksKeyboard
      });
    }
  }

  async openLessonList(chatId, messageId, typeId) {
    try {
        const lessons = await this.lessonRepository.getUserLessons(typeId);

        if (lessons.length === 0) {
            this.bot.editMessageText('–°–∫–æ—Ä–æ..', {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: { inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥', callback_data: `back_lesson` }]] }
            });
            return;
        }

        const lessonButtons = lessons.map(({ id, name }) => [{ text: name, callback_data: `lesson_${id}` }]);
        this.bot.editMessageText('–°–∫–æ—Ä–æ..', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: lessonButtons,
                resize_keyboard: true
            }
        });
    } catch (error) {
        ErrorHandler.handleError(error, chatId, this.bot);
    }
  }

  async processWallet(chatId, wallet) {
    if (!TonWeb.utils.Address.isValid(wallet)) {
      this.bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ—à–µ–ª—å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!');
      return;
    }

    try {
      await this.userRepository.updateUserWallet(chatId, wallet);
      this.clearUserState(chatId);

      const keyboard = chatId.toString() === this.adminId ? adminKeyboard : authKeyboard;
      this.bot.sendMessage(chatId, '–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!', keyboard);
    } catch (error) {
      ErrorHandler.handleError(error, chatId, this.bot);
    }
  }

  async processBroadcastMessage(chatId, messageId) {
    try {
      await this.broadcastMessage(chatId, messageId);
      this.clearUserState(chatId);
      this.bot.sendMessage(chatId, '–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
      ErrorHandler.handleError(error, chatId, this.bot);
    }
  }

  async processTaskSelection(chatId, data, messageId) {
    const taskId = parseInt(data.split('_')[1], 10);
    try {
      const task = await this.taskRepository.getTaskById(taskId);

      if (task.length === 0) {
        this.bot.sendMessage(chatId, '–¢–∞–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
        return;
      }

      this.bot.editMessageText(task[0].text, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [{ text: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ!', callback_data: `done_${task[0].id}` }],
            [{ text: '–ù–∞–∑–∞–¥', callback_data: `back_task` }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      ErrorHandler.handleError(error, chatId, this.bot);
    }
  }

  async processLessonSelection(chatId, data, messageId) {
    const lessonId = parseInt(data.split('_')[1], 10);
    try {
      const lesson = await this.lessonRepository.getLessonById(lessonId);
  
      if (lesson.length === 0) {
        this.bot.sendMessage(chatId, '–¢–∞–∫–æ–≥–æ —É—Ä–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
        return;
      }
  
      await this.lessonRepository.acceptLesson(chatId, lessonId);
  
      if (lesson[0]?.photo_path) {
        await this.bot.sendPhoto(chatId, __dirname + lesson[0].photo_path, {
          caption: lesson[0].text,
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ù–∞–∑–∞–¥', callback_data: `back_lesson` }]
            ],
            resize_keyboard: true
          }
        });
      } else {
        await this.bot.sendMessage(chatId, lesson[0].text, {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ù–∞–∑–∞–¥', callback_data: `back_lesson` }]
            ],
            resize_keyboard: true
          }
        });
      }
  
      await this.bot.deleteMessage(chatId, messageId);
  
    } catch (error) {
      ErrorHandler.handleError(error, chatId, this.bot);
    }
  }  

  async processArchiveSelection(chatId, data, messageId) {
    const taskId = parseInt(data.split('_')[1], 10);
    try {
      const task = await this.taskRepository.getTaskById(taskId);

      if (task.length === 0) {
        this.bot.sendMessage(chatId, '–¢–∞–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
        return;
      }

      this.bot.editMessageText(task[0].text, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ù–∞–∑–∞–¥', callback_data: `back_task` }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      ErrorHandler.handleError(error, chatId, this.bot);
    }
  }

  async processTaskCompletion(chatId, data, messageId) {
    const taskId = parseInt(data.split('_')[1], 10);
    
    try {
      const isAccept = await this.taskRepository.acceptTask(chatId, taskId);

      if (!isAccept) {
        this.bot.editMessageText('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
          chat_id: chatId,
          message_id: messageId
        });
        
        return;
      }

      this.bot.editMessageText('–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!', {
        chat_id: chatId,
        message_id: messageId
      });
 
    } catch (error) {
      ErrorHandler.handleError(error, chatId, this.bot);
    }
  }

  async proccessConfirmTask(chatId, data, messageId) {
    const taskId = parseInt(data.split('_')[1], 10);

    this.bot.editMessageText('–í—ã —É–≤–µ—Ä–µ–Ω—ã?', {
      chat_id: chatId, 
      message_id: messageId,
      reply_markup: { inline_keyboard: [[{ text: '–î–∞', callback_data: `confirm_${taskId}`}, { text: '–ù–µ—Ç', callback_data: 'back_task'}]] }
    })
  }

  async openArchiveList(chatId, messageId) {
    try {
      const tasks = await this.taskRepository.getCompletedTasks(chatId);

      if (tasks.length === 0) {
        this.bot.editMessageText('–ê—Ä—Ö–∏–≤ –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç!', {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: { inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥', callback_data: `back_task` }]] }
        });
        return;
      }

      const tasksButtons = tasks.map(({ id, name }) => [{ text: name, callback_data: `archive_${id}` }]);
      this.bot.editMessageText('–ê—Ä—Ö–∏–≤ –∑–∞–¥–∞–Ω–∏–π:', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: tasksButtons,
          resize_keyboard: true
        }
      });
    } catch (error) {
      ErrorHandler.handleError(error, chatId, this.bot);
    }
  }

  async openTaskList(chatId, messageId) {
    try {
      const tasks = await this.taskRepository.getUserTasks(chatId);

      if (tasks.length === 0) {
        this.bot.editMessageText('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç!', {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: { inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥', callback_data: `back_task` }]] }
        });
        return;
      }

      const taskButtons = tasks.map(({ id, name }) => [{ text: name, callback_data: `task_${id}` }]);
      this.bot.editMessageText('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π:', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: taskButtons,
          resize_keyboard: true
        }
      });
    } catch (error) {
      ErrorHandler.handleError(error, chatId, this.bot);
    }
  }

  async broadcastMessage(chatId, messageId) {
    try {
      const allUsers = await this.userRepository.getAllUsers();

      allUsers
          .filter(user => user.id.toString() !== this.adminId)
          .forEach(user => {
              this.bot.copyMessage(user.id, chatId, messageId);
          });
    } catch (error) {
        ErrorHandler.handleError(error, this.adminId, this.bot);
    }
  }

  clearUserState(chatId) {
    delete this.userState[chatId];
  }
}

module.exports = UserHandler;